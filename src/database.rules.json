
{
  "rules": {
    "users": {
      "$uid": {
        ".read": "auth != null",
        ".write": "auth != null && auth.uid === $uid",
        ".validate": "newData.hasChildren(['uid', 'username', 'displayName', 'email', 'bio'])",
        "uid": { ".validate": "newData.isString() && newData.val() === $uid" },
        "username": { ".validate": "newData.isString() && newData.val().length >= 3 && newData.val().length <= 30 && newData.val().matches(/^[a-zA-Z0-9_]+$/)" },
        "displayName": { ".validate": "newData.isString() && newData.val().length > 0 && newData.val().length <= 50 && newData.val().matches(/^[a-zA-Z0-9_ .]+$/)" },
        "email": { ".validate": "newData.isString() && newData.val().length > 0" },
        "avatar": { ".validate": "newData.isString()" },
        "banner": { ".validate": "newData.isString()" },
        "bio": { ".validate": "newData.isString() && newData.val().length <= 1000" },
        "nameColor": { ".validate": "!newData.exists() || (newData.isString() && newData.val().matches(/^#[0-9A-Fa-f]{6}$/))" },
        "title": { ".validate": "!newData.exists() || (newData.isString() && newData.val().length <= 50)" },
        "isShinyGold": { ".validate": "!newData.exists() || newData.isBoolean()" },
        "friendsCount": { ".validate": "!newData.exists() || (newData.isNumber() && newData.val() >= 0)" },
        "$other": { ".validate": false }
      }
    },
    "usernames": {
      "$username": {
        ".read": true,
        // User can only write (create or delete) their own username mapping.
        // For creation: newData must exist, data must not, and the value written must be their UID.
        // For deletion: newData must not exist, data must, and the existing value must be their UID.
        ".write": "auth != null && ( (newData.exists() && !data.exists() && newData.val() === auth.uid) || (!newData.exists() && data.exists() && data.val() === auth.uid) )",
        // Validates that the value being written (the UID) is a string and reasonably long.
        ".validate": "newData.isString() && newData.val().length > 10"
      }
    },
    "chats": {
      "$chatId": {
        ".read": "auth != null && ( ($chatId.contains('dm_') && $chatId.contains(auth.uid)) || $chatId === 'global' || $chatId === 'ai-chatbot' || (!$chatId.contains('dm_') && $chatId !== 'global' && $chatId !== 'ai-chatbot') )",
        // Users can write to DMs they are part of, global chat, AI chatbot, or party chats.
        ".write": "auth != null && ( ($chatId.contains('dm_') && $chatId.contains(auth.uid)) || $chatId === 'global' || $chatId === 'ai-chatbot' || (!$chatId.contains('dm_') && $chatId !== 'global' && $chatId !== 'ai-chatbot') )",
        "$messageId": {
          ".validate": "newData.hasChildren(['senderUid', 'senderName', 'senderUsername', 'content', 'timestamp']) && newData.child('senderUid').val() === auth.uid && newData.child('timestamp').val() === now",
          "senderUid": { ".validate": "newData.isString() && newData.val() === auth.uid" },
          "senderName": { ".validate": "newData.isString() && newData.val().length > 0 && newData.val().length <= 50" },
          "senderUsername": { ".validate": "newData.isString() && newData.val().length > 0 && newData.val().length <= 30" },
          "senderAvatar": { ".validate": "newData.isString()" },
          "senderNameColor": { ".validate": "!newData.exists() || (newData.isString() && newData.val().matches(/^#[0-9A-Fa-f]{6}$/))" },
          "senderTitle": { ".validate": "!newData.exists() || (newData.isString() && newData.val().length <= 50)" },
          "senderIsShinyGold": { ".validate": "!newData.exists() || newData.isBoolean()" },
          "content": { ".validate": "newData.isString() && newData.val().length > 0 && newData.val().length <= 2000" },
          "timestamp": { ".validate": "newData.val() === now" },
          "$other": { ".validate": false }
        }
      }
    },
    "friend_requests": {
      "$receiver_uid": {
        ".read": "auth != null && auth.uid === $receiver_uid",
        "$sender_uid": {
          ".read": "auth != null && (auth.uid === $receiver_uid || auth.uid === $sender_uid)",
          ".write": "auth != null && ( (newData.exists() && !data.exists() && auth.uid === $sender_uid) || (!newData.exists() && data.exists() && auth.uid === $receiver_uid) )",
          ".validate": "!newData.exists() || (newData.hasChildren(['senderUsername', 'senderUid', 'timestamp', 'status']) && newData.child('senderUid').val() === $sender_uid)",
          "senderUsername": { ".validate": "newData.isString() && newData.val().length > 0" },
          "senderUid": { ".validate": "newData.isString() && newData.val() === $sender_uid" },
          "timestamp": { ".validate": "newData.val() === now || newData.isNumber()" },
          "status": { ".validate": "newData.isString() && (newData.val() === 'pending')" },
          "$other": { ".validate": false }
        }
      }
    },
    "friends": {
      "$user_uid": {
        ".read": "auth != null && auth.uid === $user_uid",
        "$friend_uid": {
          ".write": "auth != null && (auth.uid === $user_uid || auth.uid === $friend_uid)",
          ".validate": "newData.hasChildren(['since'])",
          "since": {".validate": "newData.val() === now || newData.isNumber()"},
          "$other": { ".validate": false }
        }
      }
    },
    "blocked_users": {
      "$blocker_uid": {
        ".read": "auth != null && auth.uid === $blocker_uid",
        "$blocked_uid": {
          ".write": "auth != null && auth.uid === $blocker_uid",
          ".validate": "newData.isBoolean()"
        }
      }
    },
    "users_blocked_by": {
      "$blocked_uid": {
        ".read": "auth != null && auth.uid === $blocked_uid",
        "$blocker_uid": {
          ".write": "auth != null && auth.uid === $blocker_uid",
          ".validate": "newData.isBoolean()"
        }
      }
    }
  }
}
